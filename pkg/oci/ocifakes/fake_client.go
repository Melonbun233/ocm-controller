// Code generated by counterfeiter. DO NOT EDIT.
package ocifakes

import (
	"context"
	"io"
	"sync"

	"github.com/open-component-model/ocm-controller/pkg/oci"
)

type FakeClient struct {
	FetchAndCacheResourceStub        func(context.Context, oci.ResourceOptions) (io.ReadCloser, error)
	fetchAndCacheResourceMutex       sync.RWMutex
	fetchAndCacheResourceArgsForCall []struct {
		arg1 context.Context
		arg2 oci.ResourceOptions
	}
	fetchAndCacheResourceReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	fetchAndCacheResourceReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	PushResourceStub        func(context.Context, oci.ResourceOptions) error
	pushResourceMutex       sync.RWMutex
	pushResourceArgsForCall []struct {
		arg1 context.Context
		arg2 oci.ResourceOptions
	}
	pushResourceReturns struct {
		result1 error
	}
	pushResourceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) FetchAndCacheResource(arg1 context.Context, arg2 oci.ResourceOptions) (io.ReadCloser, error) {
	fake.fetchAndCacheResourceMutex.Lock()
	ret, specificReturn := fake.fetchAndCacheResourceReturnsOnCall[len(fake.fetchAndCacheResourceArgsForCall)]
	fake.fetchAndCacheResourceArgsForCall = append(fake.fetchAndCacheResourceArgsForCall, struct {
		arg1 context.Context
		arg2 oci.ResourceOptions
	}{arg1, arg2})
	fake.recordInvocation("FetchAndCacheResource", []interface{}{arg1, arg2})
	fake.fetchAndCacheResourceMutex.Unlock()
	if fake.FetchAndCacheResourceStub != nil {
		return fake.FetchAndCacheResourceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchAndCacheResourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) FetchAndCacheResourceCallCount() int {
	fake.fetchAndCacheResourceMutex.RLock()
	defer fake.fetchAndCacheResourceMutex.RUnlock()
	return len(fake.fetchAndCacheResourceArgsForCall)
}

func (fake *FakeClient) FetchAndCacheResourceCalls(stub func(context.Context, oci.ResourceOptions) (io.ReadCloser, error)) {
	fake.fetchAndCacheResourceMutex.Lock()
	defer fake.fetchAndCacheResourceMutex.Unlock()
	fake.FetchAndCacheResourceStub = stub
}

func (fake *FakeClient) FetchAndCacheResourceArgsForCall(i int) (context.Context, oci.ResourceOptions) {
	fake.fetchAndCacheResourceMutex.RLock()
	defer fake.fetchAndCacheResourceMutex.RUnlock()
	argsForCall := fake.fetchAndCacheResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) FetchAndCacheResourceReturns(result1 io.ReadCloser, result2 error) {
	fake.fetchAndCacheResourceMutex.Lock()
	defer fake.fetchAndCacheResourceMutex.Unlock()
	fake.FetchAndCacheResourceStub = nil
	fake.fetchAndCacheResourceReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchAndCacheResourceReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.fetchAndCacheResourceMutex.Lock()
	defer fake.fetchAndCacheResourceMutex.Unlock()
	fake.FetchAndCacheResourceStub = nil
	if fake.fetchAndCacheResourceReturnsOnCall == nil {
		fake.fetchAndCacheResourceReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.fetchAndCacheResourceReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PushResource(arg1 context.Context, arg2 oci.ResourceOptions) error {
	fake.pushResourceMutex.Lock()
	ret, specificReturn := fake.pushResourceReturnsOnCall[len(fake.pushResourceArgsForCall)]
	fake.pushResourceArgsForCall = append(fake.pushResourceArgsForCall, struct {
		arg1 context.Context
		arg2 oci.ResourceOptions
	}{arg1, arg2})
	fake.recordInvocation("PushResource", []interface{}{arg1, arg2})
	fake.pushResourceMutex.Unlock()
	if fake.PushResourceStub != nil {
		return fake.PushResourceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pushResourceReturns
	return fakeReturns.result1
}

func (fake *FakeClient) PushResourceCallCount() int {
	fake.pushResourceMutex.RLock()
	defer fake.pushResourceMutex.RUnlock()
	return len(fake.pushResourceArgsForCall)
}

func (fake *FakeClient) PushResourceCalls(stub func(context.Context, oci.ResourceOptions) error) {
	fake.pushResourceMutex.Lock()
	defer fake.pushResourceMutex.Unlock()
	fake.PushResourceStub = stub
}

func (fake *FakeClient) PushResourceArgsForCall(i int) (context.Context, oci.ResourceOptions) {
	fake.pushResourceMutex.RLock()
	defer fake.pushResourceMutex.RUnlock()
	argsForCall := fake.pushResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) PushResourceReturns(result1 error) {
	fake.pushResourceMutex.Lock()
	defer fake.pushResourceMutex.Unlock()
	fake.PushResourceStub = nil
	fake.pushResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PushResourceReturnsOnCall(i int, result1 error) {
	fake.pushResourceMutex.Lock()
	defer fake.pushResourceMutex.Unlock()
	fake.PushResourceStub = nil
	if fake.pushResourceReturnsOnCall == nil {
		fake.pushResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchAndCacheResourceMutex.RLock()
	defer fake.fetchAndCacheResourceMutex.RUnlock()
	fake.pushResourceMutex.RLock()
	defer fake.pushResourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ oci.Client = new(FakeClient)
